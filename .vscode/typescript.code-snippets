{
  "api-get": {
    "prefix": "api-get",
    "body": [
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  ${1:// Define request type here}",
      "};",
      "",
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "const ${TM_FILENAME_BASE} = async (params: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType> => {",
      "  try {",
      "    const queryParams = new URLSearchParams(params as Record<string, string>).toString();",
      "    const response = await fetch(`${3:https://api.example.com/data}?${queryParams}`);",
      "    if (!response.ok) {",
      "      throw new Error('Network response was not ok');",
      "    }",
      "    const data: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = await response.json();",
      "    return data;",
      "  } catch (error) {",
      "    console.error('Error fetching data:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Fetch data using GET request"
  },
  "api-post": {
    "prefix": "api-post",
    "body": [
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  ${1:// Define request type here}",
      "};",
      "",
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "const ${TM_FILENAME_BASE} = async (data: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType> => {",
      "  try {",
      "    const response = await fetch('${3:https://api.example.com/data}', {",
      "      method: 'POST',",
      "      headers: {",
      "        'Content-Type': 'application/json',",
      "      },",
      "      body: JSON.stringify(data),",
      "    });",
      "    if (!response.ok) {",
      "      throw new Error('Network response was not ok');",
      "    }",
      "    const result: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = await response.json();",
      "    return result;",
      "  } catch (error) {",
      "    console.error('Error posting data:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Post data using POST request"
  },
  "api-delete": {
    "prefix": "api-delete",
    "body": [
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  id: string;",
      "  ${1:// Define additional request parameters here}",
      "};",
      "",
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "const ${TM_FILENAME_BASE} = async ({ id, ...params }: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType> => {",
      "  try {",
      "    const queryParams = new URLSearchParams(params as Record<string, string>).toString();",
      "    const response = await fetch(`${3:https://api.example.com/data}/${id}?${queryParams}`, {",
      "      method: 'DELETE',",
      "    });",
      "    if (!response.ok) {",
      "      throw new Error('Network response was not ok');",
      "    }",
      "    const result: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = await response.json();",
      "    return result;",
      "  } catch (error) {",
      "    console.error('Error deleting data:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Delete data using DELETE request"
  },
  "api-put": {
    "prefix": "api-put",
    "body": [
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  id: string;",
      "  ${1:// Define request type here}",
      "};",
      "",
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "const ${TM_FILENAME_BASE} = async ({ id, ...data }: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType): Promise<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType> => {",
      "  try {",
      "    const response = await fetch(`${3:https://api.example.com/data}/${id}`, {",
      "      method: 'PUT',",
      "      headers: {",
      "        'Content-Type': 'application/json',",
      "      },",
      "      body: JSON.stringify(data),",
      "    });",
      "    if (!response.ok) {",
      "      throw new Error('Network response was not ok');",
      "    }",
      "    const result: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = await response.json();",
      "    return result;",
      "  } catch (error) {",
      "    console.error('Error updating data:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Update data using PUT request"
  },
  "api-patch": {
    "prefix": "api-patch",
    "body": [
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType = {",
      "  id: string;",
      "  ${1:// Define request type here}",
      "};",
      "",
      "type ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = {",
      "  ${2:// Define response type here}",
      "};",
      "",
      "const ${TM_FILENAME_BASE} = async ({ id, ...data }: Partial<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}RequestType>): Promise<${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType> => {",
      "  try {",
      "    const response = await fetch(`${3:https://api.example.com/data}/${id}`, {",
      "      method: 'PATCH',",
      "      headers: {",
      "        'Content-Type': 'application/json',",
      "      },",
      "      body: JSON.stringify(data),",
      "    });",
      "    if (!response.ok) {",
      "      throw new Error('Network response was not ok');",
      "    }",
      "    const result: ${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}ResponseType = await response.json();",
      "    return result;",
      "  } catch (error) {",
      "    console.error('Error patching data:', error);",
      "    throw error;",
      "  }",
      "};"
    ],
    "description": "Patch data using PATCH request"
  }
}
